def create_font_bitmap(characters, width=16, height=16, on_color=0xFFFF, off_color=0x0000):
    """
    Generate ARM assembly bitmap representations for a set of characters.
    
    Args:
        characters (str): The characters to convert to bitmaps
        width (int): Width of each character in pixels
        height (int): Height of each character in pixels
        on_color (int): 16-bit RGB565 color value for "on" pixels (default is white: 0xFFFF)
        off_color (int): 16-bit RGB565 color value for "off" pixels (default is black: 0x0000)
    
    Returns:
        str: ARM assembly code defining the bitmaps
    """
    result = []
    
    # Simple bitmap patterns for ASCII characters (16x16)
    # Each character is represented as a list of rows, where each row is a binary pattern
    patterns = {
        'A': [
            "0000000000000000",
            "0000000000000000",
            "0000001100000000",
            "0000011110000000",
            "0000111111000000",
            "0001100011100000",
            "0011000001110000",
            "0110000000111000",
            "1100000000011100",
            "1111111111111100",
            "1100000000011100",
            "1100000000011100",
            "1100000000011100",
            "1100000000011100",
            "0000000000000000",
            "0000000000000000"
        ],
        'B': [
            "0000000000000000",
            "1111111111000000",
            "1100000001100000",
            "1100000000110000",
            "1100000000110000",
            "1100000001100000",
            "1111111111000000",
            "1100000001100000",
            "1100000000110000",
            "1100000000110000",
            "1100000001100000",
            "1111111111000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'C': [
            "0000000000000000",
            "0000111111000000",
            "0011000001100000",
            "0110000000110000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "0110000000110000",
            "0011000001100000",
            "0000111111000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'D': [
            "0000000000000000",
            "1111111110000000",
            "1100000011000000",
            "1100000001100000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000001100000",
            "1100000011000000",
            "1111111110000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'E': [
            "0000000000000000",
            "1111111111110000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1111111111100000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1111111111110000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'F': [
            "0000000000000000",
            "1111111111110000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1111111111100000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'G': [
            "0000000000000000",
            "0000111111000000",
            "0011000001100000",
            "0110000000110000",
            "1100000000000000",
            "1100000000000000",
            "1100000111111000",
            "1100000000111000",
            "1100000000011000",
            "0110000000111000",
            "0011000001111000",
            "0000111111011000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'H': [
            "0000000000000000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1111111111110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'I': [
            "0000000000000000",
            "0000111100000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000111100000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'J': [
            "0000000000000000",
            "0000000111110000",
            "0000000001100000",
            "0000000001100000",
            "0000000001100000",
            "0000000001100000",
            "0000000001100000",
            "0000000001100000",
            "1100000001100000",
            "1110000011000000",
            "0111001110000000",
            "0001111000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'K': [
            "0000000000000000",
            "1100000001100000",
            "1100000011000000",
            "1100000110000000",
            "1100001100000000",
            "1100011000000000",
            "1100110000000000",
            "1111100000000000",
            "1100110000000000",
            "1100011000000000",
            "1100001100000000",
            "1100000110000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'L': [
            "0000000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1111111111110000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'M': [
            "0000000000000000",
            "1100000000011000",
            "1110000000111000",
            "1111000001111000",
            "1101100011011000",
            "1100110110011000",
            "1100011100011000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'N': [
            "0000000000000000",
            "1100000000110000",
            "1110000000110000",
            "1111000000110000",
            "1101100000110000",
            "1100110000110000",
            "1100011000110000",
            "1100001100110000",
            "1100000110110000",
            "1100000011110000",
            "1100000001110000",
            "1100000000110000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'O': [
            "0000000000000000",
            "0000111110000000",
            "0011000011000000",
            "0110000001100000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "0110000001100000",
            "0011000011000000",
            "0000111110000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'P': [
            "0000000000000000",
            "1111111111000000",
            "1100000001100000",
            "1100000000110000",
            "1100000000110000",
            "1100000001100000",
            "1111111111000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "1100000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'Q': [
            "0000000000000000",
            "0000111110000000",
            "0011000011000000",
            "0110000001100000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100001100110000",
            "0110000011100000",
            "0011000011000000",
            "0000111110001100",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'R': [
            "0000000000000000",
            "1111111111000000",
            "1100000001100000",
            "1100000000110000",
            "1100000000110000",
            "1100000001100000",
            "1111111111000000",
            "1100011000000000",
            "1100001100000000",
            "1100000110000000",
            "1100000011000000",
            "1100000001100000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'S': [
            "0000000000000000",
            "0001111111000000",
            "0011000001100000",
            "0110000000000000",
            "0110000000000000",
            "0011000000000000",
            "0001111110000000",
            "0000000011000000",
            "0000000001100000",
            "0000000001100000",
            "0011000001100000",
            "0001111111000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'T': [
            "0000000000000000",
            "1111111111111000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'U': [
            "0000000000000000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "1100000000110000",
            "0110000001100000",
            "0001111110000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'V': [
            "0000000000000000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "0110000000110000",
            "0110000000110000",
            "0011000001100000",
            "0011000001100000",
            "0001100011000000",
            "0000110110000000",
            "0000011100000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'W': [
            "0000000000000000",
            "1100000000001100",
            "1100000000001100",
            "1100000000001100",
            "1100000000001100",
            "1100000110001100",
            "1100000110001100",
            "1100001111001100",
            "1100011001101100",
            "1100110000111100",
            "1111000000011100",
            "1100000000001100",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'X': [
            "0000000000000000",
            "1100000000011000",
            "0110000000110000",
            "0011000001100000",
            "0001100011000000",
            "0000110110000000",
            "0000011100000000",
            "0000011100000000",
            "0000110110000000",
            "0001100011000000",
            "0011000001100000",
            "1100000000110000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'Y': [
            "0000000000000000",
            "1100000000011000",
            "0110000000110000",
            "0011000001100000",
            "0001100011000000",
            "0000110110000000",
            "0000011100000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000011000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        'Z': [
            "0000000000000000",
            "1111111111111000",
            "0000000000110000",
            "0000000001100000",
            "0000000011000000",
            "0000000110000000",
            "0000001100000000",
            "0000011000000000",
            "0000110000000000",
            "0001100000000000",
            "0011000000000000",
            "1111111111111000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
                '0': [
            "0000000000000000",
            "0000111111000000",
            "0011000001100000",
            "0110000000110000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "1100000000011000",
            "0110000000110000",
            "0011000001100000",
            "0000111111000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '1': [
            "0000000000000000",
            "0000001100000000",
            "0000111100000000",
            "0001111100000000",
            "0000001100000000",
            "0000001100000000",
            "0000001100000000",
            "0000001100000000",
            "0000001100000000",
            "0000001100000000",
            "0000001100000000",
            "0000001100000000",
            "0001111111000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '2': [
            "0000000000000000",
            "0001111110000000",
            "0011000011000000",
            "0110000001100000",
            "0000000001100000",
            "0000000011000000",
            "0000000110000000",
            "0000001100000000",
            "0000011000000000",
            "0000110000000000",
            "0001100000000000",
            "0011000000000000",
            "0111111111100000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '3': [
            "0000000000000000",
            "0001111110000000",
            "0011000011000000",
            "0110000001100000",
            "0000000001100000",
            "0000000011000000",
            "0000111110000000",
            "0000000011000000",
            "0000000001100000",
            "0000000001100000",
            "0110000001100000",
            "0011000011000000",
            "0001111110000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '4': [
            "0000000000000000",
            "0000000110000000",
            "0000001110000000",
            "0000011110000000",
            "0000110110000000",
            "0001100110000000",
            "0011000110000000",
            "0110000110000000",
            "1111111111100000",
            "0000000110000000",
            "0000000110000000",
            "0000000110000000",
            "0000001111000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '5': [
            "0000000000000000",
            "0111111111000000",
            "0110000000000000",
            "0110000000000000",
            "0110000000000000",
            "0111111110000000",
            "0110000011000000",
            "0000000001100000",
            "0000000001100000",
            "0000000001100000",
            "0110000011000000",
            "0011111110000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '6': [
            "0000000000000000",
            "0000111111000000",
            "0011000011000000",
            "0110000000000000",
            "1100000000000000",
            "1100000000000000",
            "1101111110000000",
            "1110000011000000",
            "1100000001100000",
            "1100000001100000",
            "0110000001100000",
            "0011111111000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '7': [
            "0000000000000000",
            "1111111111100000",
            "0000000001100000",
            "0000000011000000",
            "0000000110000000",
            "0000001100000000",
            "0000011000000000",
            "0000110000000000",
            "0001100000000000",
            "0011000000000000",
            "0110000000000000",
            "1100000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '8': [
            "0000000000000000",
            "0001111110000000",
            "0011000011000000",
            "0110000001100000",
            "0110000001100000",
            "0011000011000000",
            "0001111110000000",
            "0011000011000000",
            "0110000001100000",
            "1100000000110000",
            "1100000000110000",
            "0111111111100000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        '9': [
            "0000000000000000",
            "0001111110000000",
            "0011000011000000",
            "0110000001100000",
            "1100000001100000",
            "1100000001100000",
            "0110000011100000",
            "0011111111100000",
            "0000000001100000",
            "0000000001100000",
            "0011000011000000",
            "0001111110000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000",
            "0000000000000000"
        ],
        # Add more characters as needed
    }
    
    # Add basic patterns for characters that don't have predefined patterns
    for char in characters:
        if char not in patterns:
            # Create a simple representation for undefined characters
            if 'a' <= char <= 'z' or 'A' <= char <= 'Z' or '0' <= char <= '9':
                patterns[char] = [
                    "0000000000000000",
                    "0000111111000000",
                    "0011000001100000",
                    "0110000000110000",
                    "1100000000011000",
                    "1100000000011000",
                    "1100000000011000",
                    "1100000000011000",
                    "1100000000011000",
                    "1100000000011000",
                    "1100000000011000",
                    "0110000000110000",
                    "0011000001100000",
                    "0000111111000000",
                    "0000000000000000",
                    "0000000000000000"
                ]
            else:
                patterns[char] = ["0000000000000000"] * height
    
    for char in characters:
        ascii_value = ord(char)
        pattern = patterns.get(char, ["0000000000000000"] * height)
        
        # Ensure pattern has the correct height
        if len(pattern) < height:
            pattern = pattern + ["0000000000000000"] * (height - len(pattern))
        elif len(pattern) > height:
            pattern = pattern[:height]
            
        # Create ARM assembly code for this character
        result.append(f"char_{ascii_value}")
        # Add DCD directives for width and height
        result.append(f"    DCD {width}")
        result.append(f"    DCD {height}")
        
        for row_idx, row in enumerate(pattern):
            # Ensure row has the correct width
            if len(row) < width:
                row = row + "0" * (width - len(row))
            elif len(row) > width:
                row = row[:width]
            
            # Split the 16-bit row into two 8-bit groups for better visualization
            row_description = row_pattern_description(row)
            result.append(f"; Row {row_idx} {row} -> {row_description}")
            
            # Convert the binary pattern to DCW statements
            pixel_values = []
            for bit in row:
                color = on_color if bit == '1' else off_color
                pixel_values.append(f"0x{color:04X}")
            
            # Format as DCW statements (in groups of 8 for readability)
            chunks = [pixel_values[i:i+8] for i in range(0, len(pixel_values), 8)]
            for chunk in chunks:
                dcw_line = f"    DCW {', '.join(chunk)}"
                result.append(dcw_line)
        
        result.append("")  # Add a blank line between characters
    
    return "\n".join(result)

def row_pattern_description(binary_row):
    """Generate a description of which pixels are on in a row"""
    if "1" not in binary_row:
        return "all pixels off"
    
    on_pixels = [i for i, bit in enumerate(binary_row) if bit == "1"]
    
    if len(on_pixels) == len(binary_row):
        return "all pixels on"
        
    if len(on_pixels) > len(binary_row) // 2:
        # If more than half the pixels are on, describe the off pixels instead
        off_pixels = [i for i, bit in enumerate(binary_row) if bit == "0"]
        return f"pixels {format_pixel_groups(off_pixels)} off"
    
    return f"pixels {format_pixel_groups(on_pixels)} on"

def format_pixel_groups(pixel_indices):
    """Format a list of pixel indices into a readable description with ranges"""
    if not pixel_indices:
        return ""
        
    # Group consecutive pixel positions
    groups = []
    current_group = [pixel_indices[0]]
    
    for pos in pixel_indices[1:]:
        if pos == current_group[-1] + 1:
            current_group.append(pos)
        else:
            groups.append(current_group)
            current_group = [pos]
    
    groups.append(current_group)
    
    # Create description parts
    parts = []
    for group in groups:
        if len(group) == 1:
            parts.append(f"{group[0]}")
        elif len(group) == 2:
            parts.append(f"{group[0]},{group[1]}")
        else:
            parts.append(f"{group[0]}-{group[-1]}")
    
    # Join the parts with appropriate connectors
    if len(parts) == 1:
        return parts[0]
    elif len(parts) == 2:
        return f"{parts[0]} and {parts[1]}"
    else:
        return ", ".join(parts[:-1]) + f", and {parts[-1]}"

def main():
    # Example usage
    characters_to_convert = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
    bitmap_code = create_font_bitmap(characters_to_convert)
    
    # Print the result
    print(bitmap_code)
    
    # Optionally save to a file
    with open("font_bitmaps.s", "w") as f:
        f.write(bitmap_code)
    
if __name__ == "__main__":
    main()